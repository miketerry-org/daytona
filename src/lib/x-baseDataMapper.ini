// BaseDataMapper.js

class BaseDataMapper {
  constructor(db) {
    if (!db) throw new Error("BaseDataMapper requires a Database instance");
    this.db = db;

    // Must be defined in subclass
    this.table = this.defineTable();
    this.columns = this.defineColumns();

    if (!this.table || !this.columns || !Array.isArray(this.columns)) {
      throw new Error(`${this.constructor.name} must define table and columns`);
    }
  }

  // ────────────────────────────────────────────────────────────
  // ABSTRACT METHODS (override in subclasses)
  // ────────────────────────────────────────────────────────────

  defineTable() {
    throw new Error("defineTable() must be implemented in subclass");
  }

  defineColumns() {
    throw new Error("defineColumns() must be implemented in subclass");
  }

  // Optional: Convert raw DB row to domain object
  mapRowToEntity(row) {
    return row; // Override if needed
  }

  // Optional: Convert domain object to DB-safe object
  mapEntityToRow(entity) {
    return entity; // Override if needed
  }

  // ────────────────────────────────────────────────────────────
  // CRUD OPERATIONS
  // ────────────────────────────────────────────────────────────

  async findById(id) {
    const row = await this.db.findById(this.table, this.columns, id);
    return row ? this.mapRowToEntity(row) : null;
  }

  async findBy(column, value) {
    const row = await this.db.findByColumn(this.table, this.columns, column, value);
    return row ? this.mapRowToEntity(row) : null;
  }

  async findAll(criteria = "", params = {}, options = {}) {
    const rows = await this.db.findMany(this.table, this.columns, criteria, params, options);
    return rows.map(row => this.mapRowToEntity(row));
  }

  async insert(entity) {
    const data = this.mapEntityToRow(entity);
    return this.db.insert(this.table, this.columns, data);
  }

  async update(entity) {
    const data = this.mapEntityToRow(entity);
    return this.db.update(this.table, this.columns, data);
  }

  async delete(id) {
    return this.db.delete(this.table, id);
  }

  async exists(id) {
    const row = await this.findById(id);
    return !!row;
  }

  async count(criteria = "", params = {}) {
    const rows = await this.db.query(
      `SELECT COUNT(*) AS count FROM ${this.table} ${criteria ? `WHERE ${criteria}` : ""}`,
      params
    );
    return rows.length ? rows[0].count : 0;
  }
}
